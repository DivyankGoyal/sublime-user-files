<snippet>
	<content><![CDATA[
class lca_class
{
public:

	vector<vector<ll>>dp;
	vector<ll> tin, tout;
	vector<ll> dist;
	ll n, k_log;
	void dfs(vector<vector<ll>> &adj, ll u, ll p, ll &timer, ll l)
	{
		ll i, x;
		tin[u] = ++timer;
		dist[u] = l;
		if (p != u)
		{
			dp[u][0] = p;
		}
		for (i = 0; i < adj[u].size(); i++)
		{
			x = adj[u][i];
			if (x != p)
			{
				dfs(adj, x, u, timer, l + 1);
			}
		}
		tout[u] = ++timer;
	}

	ll is_ancestor(ll u, ll v)  // a ancestor of b  a -> b
	{
		return (tin[u] <= tin[v] && tout[v] <= tout[u]);
	}

	ll kthancestor(ll u, ll k)
	{
		for (ll j = k_log; j >= 0; j--)
		{
			if (k >= ((ll)1 << j))
			{
				k = k - ((ll)1 << j);
				u = dp[u][j];
			}
		}
		if (u == n + 1)
		{
			u = -1;
		}
		return u;
	}

	ll lca(ll u1, ll u2)
	{
		if (is_ancestor(u1, u2))
			return u1;
		if (is_ancestor(u2, u1))
			return u2;
		ll k = u1;
		for (ll j = k_log; j >= 0; j--)
		{
			ll temp = dp[k][j];
			if (temp != n + 1 && is_ancestor(temp, u2) == 0)
			{
				k = temp;
			}
		}
		return dp[k][0];
	}

	ll distance(ll u, ll v)
	{
		ll k = lca(u, v);
		ll ans = dist[u] + dist[v] - 2 * (dist[k]);
		return ans;
	}

	void build(vector<vector<ll>> &adj, ll n, ll src)
	{
		this->n = n;
		tin.clear();
		tout.clear();
		tin.resize(n + 1, 0);
		tout.resize(n + 1, 0);
		dist.clear();
		dist.resize(n + 1, 0);
		k_log = ceil((long double)log2(n + 1));
		dp.clear();
		dp.resize(n + 2, vector<ll> (k_log + 1));
		dp[0][0] = n + 1;
		dp[src][0] = n + 1;
		dp[n + 1][0] = n + 1;

		ll timer = 0;
		dfs(adj, src, src, timer, 0);  // parent of src is src

		for (ll z = 1; z <= k_log; z++)
		{
			for (ll i = 0; i <= n + 1; i++)
			{
				dp[i][z] = dp[dp[i][z - 1]][z - 1];
			}
		}
	}
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>tlca_lower_common_ancestor</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
