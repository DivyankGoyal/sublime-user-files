<snippet>
	<content><![CDATA[
        ll sgfun1(vector<ll> &,ll);
ll sgfun2(vector<ll> &,ll,ll);
ll sgbase();
vector<ll> sg;
void buildtree(vector<ll> &a, vector<ll> &sg, ll l, ll r, ll si)
{
    if (l == r)
    {
        sg[si] = sgfun1(a,l);
        return;
    }
    ll mid = (l + r) / 2;
    buildtree(a, sg, l, mid, 2 * si);
    buildtree(a, sg, mid + 1, r, 2 * si + 1);
    sg[si] = sgfun2(a,sg[2*si],sg[2*si+1]);
}

void build(vector<ll> &a, ll l, ll r)
{
    if(l>r)
    {
        return;
    }
    ll k = ceil((long double)log2(r));
    k = power(2, k);
    sg.clear();
    sg.resize(2 * k + 1, 0);
    buildtree(a, sg, l, r, 1);
}

ll querytree(vector<ll> &a, vector<ll> &sg, ll tl, ll tr, ll l, ll r,ll si)
{
    if (l > r)
    {
        return sgbase();
    }
    if(tl==l && tr==r)
    {
        return sg[si];
    }
    ll mid = (tl + tr) / 2;
    return sgfun2(a,querytree(a,sg,tl,mid,l,min(r,mid),2*si), querytree(a,sg,mid+1,tr,max(l,mid+1),r,2*si+1));
}

ll query(vector<ll> &a, ll l, ll r)
{
    ll n = a.size() - 1;
    if (l < 0 || r > n || l > r)
    {
        cout << "Invalid query\n";
        return -1;
    }
    return querytree(a, sg, 1, n, l, r,1);

}

void updatetree(vector<ll> &a, vector<ll> &sg,ll pos,ll value,ll l,ll r,ll si)
{
    if (l == r)  // or l == pos
    {
        sg[si] = sgfun1(a,pos);
    }
    else 
    {
        ll mid = (l + r) / 2;
        if (pos <= mid)
        {
            updatetree(a, sg, pos, value, l, mid,2*si);
        }
        else
        {
            updatetree(a, sg, pos, value,mid+1,r,2*si+1);
        }
        sg[si] = sgfun2(a, sg[si*2], sg[si*2+1]);
    }
}

void update(vector<ll> &a,ll pos,ll value)
{   
    a[pos] = value;
    ll n = a.size()-1;
    updatetree(a,sg,pos,value,1,n,1);
}

ll sgfun1(vector<ll> &a,ll x)
{
    return x;
}

ll sgfun2(vector<ll> &a,ll x,ll y)
{
    if(x==-1)
        return y;
    if(y==-1)
        return x;
    if(a[x]<a[y])
    {
        return x;
    }
    else
        return y;
}

ll sgbase()
{
    // return 0;     // in sum range query
    // return miin;  // in maximum element range query 
    // return maax;  // in minimum element range query
    return -1;    // for position of max,min element range query
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>tsimplesg</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
