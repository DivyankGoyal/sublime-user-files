<snippet>
	<content><![CDATA[
#include <bits/stdc++.h>
using namespace std;

#define int                  long long
#define ll                   long long
#define ld                   long double
#define vec                  vector<ll>
#define pll                  pair<ll,ll>
#define mll                  map<ll,ll>
#define vvec                 vector<vector<ll>>
#define vp                   vector<pair<ll,ll>>
#define pb                   push_back
#define sz(a)                ((ll)a.size())
#define ceil                 (ll)ceil
#define maax                 LLONG_MAX
#define miin                 LLONG_MIN
#define ff                   first
#define ss                   second
#define sp(x)                setprecision(x)
#define pow2(x)              ((ll)1<<(x))
#define countsetbit(n)       __builtin_popcount(n)
#define M                    998244353
// #define M                    ((1000*1000*1000) + 7)
const ll N = 50020;

ll memory = 0, tim = 0, ttt = 0;

vec factorialNumInverse , naturalNumInverse , Fact, prime;

void SieveOfEratosthenes(ll n)
{
    vector<bool> Prime(n + 1, true);
    for (int p = 2; p * p <= n; p++)
    {
        if (Prime[p] == true)
        {
            for (int i = p * p; i <= n; i += p)
            {
                Prime[i] = false;
            }
        }
    }
    for (int p = 2; p <= n; p++)
    {
        if (Prime[p])
        {
            prime[p] = 1;
        }
    }

}

vector<ll> primefactors(ll num)
{
    ll k,temp;
    vector<ll> a;
    temp = num;
    k = sqrt(temp)+1;
    for (ll i = 2; i <= k; i++)
    {
        while (temp % i == 0)
        {
            temp = temp / i;
            a.pb(i);
        }
    }
    if (temp != 1)
        a.pb(temp);
    return a;
}

vector<ll> factors(ll n)
{
    vector<ll> fac;
    ll i;
    for (i = 1; i <= sqrt(n) + 1; i++)
    {
        if (n % i == 0)
        {
            fac.pb(i);
            if (i != n / i)
            {
                fac.pb(n / i);
            }
        }
    }
    return fac;
}

bool isprime(ll num)
{
    if (num == 1)
        return false;
    ll k = sqrt(num) + 1;
    for (ll i = 2; i <= k; i++)
    {
        if (num % i == 0)
        {
            return false;
        }
    }
    return true;
}

ll kbit(ll a, ll b)
{
    ll k = (ll)1 << (b - 1);
    if ((a & k) == 0)
        return 0;
    else
        return 1;
}

vector<ll> binary(ll num)
{
    ll k = num;
    vector<ll> arr;
    while (k != 0)
    {
        arr.pb(k % 2);
        k = k / 2;
    }
    return arr;
}

void inputstring(string &s)
{
    cin >> s;
    s = ' ' + s;
}

void print(ll value)
{
    cout << "Value" << " is " << value << "\n";
}

void print(vector<ll> &v)
{
    ll i;
    cout << "\nVector " << v.size() << "\n";
    for (i = 0; i < v.size(); i++)
    {
        cout << v[i] << " ";
    }
    cout << "\n\n";
}

void print(vector<pair<ll, ll>> &v)
{
    ll i;
    cout << "\n";
    cout << "Vector pair " << v.size() << "\n";
    for (i = 0; i < v.size(); i++)
    {
        cout << v[i].ff << " " << v[i].ss << "\n";
    }
    cout << "\n";
}

void print(vector<vector<ll>> &graph1)
{
    cout << "\n";
    cout << "Graph " << sz(graph1) << "\n";
    ll n = sz(graph1);
    for (ll i = 0; i < n ; i++)
    {
        cout << i << " -> ";
        for (auto it : graph1[i])
        {
            cout << it << " ";
        }
        cout << "\n";
    }
    cout << "\n";
}

void print(mll &mpp)
{
    cout << "\n";
    cout << "MAP " << sz(mpp) << "\n";
    for (auto it : mpp)
    {
        cout << it.ff << " " << it.ss << "\n";
    }
    cout << "\n";
}

ll ncr(ll n, ll r)
{
    if (r > n || r < 0 || n < 0)
    {
        return 0;
    }
    ll i, k, p = 1;
    r = min(r, n - r);
    k = n;
    for (i = 1; i <= r; i++)
    {
        p = p * k;
        p = p / i;
        k--;
    }
    return p;
}

ll power(ll a, ll b)
{
    ll k = 1, i;
    for (i = 1; i <= b; i++)
    {
        k = k * a;
    }
    return k;
}

ll fastpower(ll x, ll y)
{
    if (y == 0)
        return 1;
    ll p = fastpower(x, y / 2) % M;
    p = (p * p) % M;
    return (y % 2 == 0) ? p : (x * p) % M;
}

ll modInverse(ll a)
{
    return fastpower(a, M - 2);
}

void InverseofNumber()
{
    naturalNumInverse[0] = naturalNumInverse[1] = 1;
    for (int i = 2; i <= N; i++)
        naturalNumInverse[i] = naturalNumInverse[M % i] * (M - M / i) % M;
}

void InverseofFactorial()
{
    factorialNumInverse[0] = factorialNumInverse[1] = 1;
    for (int i = 2; i <= N; i++)
        factorialNumInverse[i] = (naturalNumInverse[i] * factorialNumInverse[i - 1]) % M;
}

void Factorial()
{
    Fact[0] = 1;
    for (int i = 1; i <= N; i++)
    {
        Fact[i] = (Fact[i - 1] * i) % M;
    }
}

ll binomial(ll n, ll r)
{
    if (n < r || r < 0 || n < 0)
        return 0;
    ll ans = ((Fact[n] * factorialNumInverse[r]) % M * factorialNumInverse[n - r]) % M;
    return ans;
}

bool sortbysec(pair<ll, ll> a, pair<ll, ll> b)
{
    if (a.ss == b.ss)
        return a.ff < b.ff;
    return a.ss < b.ss;
}


void bfs(vector<vector<ll>> &adj, ll u, vector<ll> &vis)
{
    ll x, i, f;
    queue<ll> q;
    q.push(u);
    vis[u] = 1;
    while (!q.empty())
    {
        f = q.front();
        q.pop();
        // cout << f << " ";
        for (i = 0; i < adj[f].size(); i++)
        {
            x = adj[f][i];
            if (vis[x] == 0)
            {
                q.push(x);
                vis[x] = 1;
            }
        }
    }
}

vec parent;

void dsu(ll n)
{
    parent.clear();
    parent.resize(n + 1);
    for (ll i = 0; i <= n; i++)
    {
        parent[i] = i;
    }
}

ll findp(ll v)
{
    if (v == parent[v])
        return v;
    return parent[v] = findp(parent[v]);
}

void merge(ll a, ll b)
{
    a = findp(a);
    b = findp(b);
    if (a < b)
        parent[b] = a;
    else if (a > b)
        parent[a] = b;
    // if (a != b) //  if tree or directed graph
    // {
    //     parent[b] = a;
    // }
}


void dfs(vector<vector<ll>> &adj, ll u , vector<ll> &vis)
{
    ll i, x;
    vis[u] = 1;
    // cout<<u<<" ";
    for (i = 0; i < adj[u].size(); i++)
    {
        x = adj[u][i];
        if (vis[x] == 0)
        {
            dfs(adj, x, vis);
        }
    }
}

void myfun()
{
    ll n = 0, m = 0, i, j, k = 0, l = 0, mini = maax, maxi = 0, ans = 0, sum = 0, sum2 = 0;
    ll x = 0, y = 0, z = 0, f = 0, g = 0, h = 0, p = -1, q = 0, r = 0 ;
    char ch;
    cin >> n;
    // string s, s2;
    vec a(1, 0), b(1, 0), c(1, 0), d(1, 0);
    // vvec ar(n+1,vector<ll> (m+1,0));
    for(i=1;i<=n;i++)
    {
        cin>>x;
        a.pb(x);
    }
}

signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    // prime.resize(2000005, 0);            SieveOfEratosthenes(2000002);
    // Fact.resize(N+1,0);                  Factorial();
    // naturalNumInverse.resize(N+1,0);     InverseofNumber();
    // factorialNumInverse.resize(N+1,0);   InverseofFactorial();
    ll number = 1;
    cin >> number;
    while(number--)
    {
        myfun();
    }
    return 0;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>pract</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
